//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity lastUpdateFpsTimeEntity { get { return GetGroup(GameMatcher.LastUpdateFpsTime).GetSingleEntity(); } }
    public LastUpdateFpsTimeComponent lastUpdateFpsTime { get { return lastUpdateFpsTimeEntity.lastUpdateFpsTime; } }
    public bool hasLastUpdateFpsTime { get { return lastUpdateFpsTimeEntity != null; } }

    public GameEntity SetLastUpdateFpsTime(float newValue) {
        if (hasLastUpdateFpsTime) {
            throw new Entitas.EntitasException("Could not set LastUpdateFpsTime!\n" + this + " already has an entity with LastUpdateFpsTimeComponent!",
                "You should check if the context already has a lastUpdateFpsTimeEntity before setting it or use context.ReplaceLastUpdateFpsTime().");
        }
        var entity = CreateEntity();
        entity.AddLastUpdateFpsTime(newValue);
        return entity;
    }

    public void ReplaceLastUpdateFpsTime(float newValue) {
        var entity = lastUpdateFpsTimeEntity;
        if (entity == null) {
            entity = SetLastUpdateFpsTime(newValue);
        } else {
            entity.ReplaceLastUpdateFpsTime(newValue);
        }
    }

    public void RemoveLastUpdateFpsTime() {
        lastUpdateFpsTimeEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public LastUpdateFpsTimeComponent lastUpdateFpsTime { get { return (LastUpdateFpsTimeComponent)GetComponent(GameComponentsLookup.LastUpdateFpsTime); } }
    public bool hasLastUpdateFpsTime { get { return HasComponent(GameComponentsLookup.LastUpdateFpsTime); } }

    public void AddLastUpdateFpsTime(float newValue) {
        var index = GameComponentsLookup.LastUpdateFpsTime;
        var component = (LastUpdateFpsTimeComponent)CreateComponent(index, typeof(LastUpdateFpsTimeComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceLastUpdateFpsTime(float newValue) {
        var index = GameComponentsLookup.LastUpdateFpsTime;
        var component = (LastUpdateFpsTimeComponent)CreateComponent(index, typeof(LastUpdateFpsTimeComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveLastUpdateFpsTime() {
        RemoveComponent(GameComponentsLookup.LastUpdateFpsTime);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLastUpdateFpsTime;

    public static Entitas.IMatcher<GameEntity> LastUpdateFpsTime {
        get {
            if (_matcherLastUpdateFpsTime == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LastUpdateFpsTime);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLastUpdateFpsTime = matcher;
            }

            return _matcherLastUpdateFpsTime;
        }
    }
}
