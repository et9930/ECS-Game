//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity loadingSceneTextImageEntity { get { return GetGroup(GameMatcher.LoadingSceneTextImage).GetSingleEntity(); } }
    public LoadingSceneTextImageComponent loadingSceneTextImage { get { return loadingSceneTextImageEntity.loadingSceneTextImage; } }
    public bool hasLoadingSceneTextImage { get { return loadingSceneTextImageEntity != null; } }

    public GameEntity SetLoadingSceneTextImage(string newTitle, string newText, string newImagePath) {
        if (hasLoadingSceneTextImage) {
            throw new Entitas.EntitasException("Could not set LoadingSceneTextImage!\n" + this + " already has an entity with LoadingSceneTextImageComponent!",
                "You should check if the context already has a loadingSceneTextImageEntity before setting it or use context.ReplaceLoadingSceneTextImage().");
        }
        var entity = CreateEntity();
        entity.AddLoadingSceneTextImage(newTitle, newText, newImagePath);
        return entity;
    }

    public void ReplaceLoadingSceneTextImage(string newTitle, string newText, string newImagePath) {
        var entity = loadingSceneTextImageEntity;
        if (entity == null) {
            entity = SetLoadingSceneTextImage(newTitle, newText, newImagePath);
        } else {
            entity.ReplaceLoadingSceneTextImage(newTitle, newText, newImagePath);
        }
    }

    public void RemoveLoadingSceneTextImage() {
        loadingSceneTextImageEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public LoadingSceneTextImageComponent loadingSceneTextImage { get { return (LoadingSceneTextImageComponent)GetComponent(GameComponentsLookup.LoadingSceneTextImage); } }
    public bool hasLoadingSceneTextImage { get { return HasComponent(GameComponentsLookup.LoadingSceneTextImage); } }

    public void AddLoadingSceneTextImage(string newTitle, string newText, string newImagePath) {
        var index = GameComponentsLookup.LoadingSceneTextImage;
        var component = (LoadingSceneTextImageComponent)CreateComponent(index, typeof(LoadingSceneTextImageComponent));
        component.title = newTitle;
        component.text = newText;
        component.imagePath = newImagePath;
        AddComponent(index, component);
    }

    public void ReplaceLoadingSceneTextImage(string newTitle, string newText, string newImagePath) {
        var index = GameComponentsLookup.LoadingSceneTextImage;
        var component = (LoadingSceneTextImageComponent)CreateComponent(index, typeof(LoadingSceneTextImageComponent));
        component.title = newTitle;
        component.text = newText;
        component.imagePath = newImagePath;
        ReplaceComponent(index, component);
    }

    public void RemoveLoadingSceneTextImage() {
        RemoveComponent(GameComponentsLookup.LoadingSceneTextImage);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLoadingSceneTextImage;

    public static Entitas.IMatcher<GameEntity> LoadingSceneTextImage {
        get {
            if (_matcherLoadingSceneTextImage == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LoadingSceneTextImage);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLoadingSceneTextImage = matcher;
            }

            return _matcherLoadingSceneTextImage;
        }
    }
}
