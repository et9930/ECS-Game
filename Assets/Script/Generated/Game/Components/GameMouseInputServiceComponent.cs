//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity mouseInputServiceEntity { get { return GetGroup(GameMatcher.MouseInputService).GetSingleEntity(); } }
    public MouseInputServiceComponent mouseInputService { get { return mouseInputServiceEntity.mouseInputService; } }
    public bool hasMouseInputService { get { return mouseInputServiceEntity != null; } }

    public GameEntity SetMouseInputService(IMouseInputService newInstance) {
        if (hasMouseInputService) {
            throw new Entitas.EntitasException("Could not set MouseInputService!\n" + this + " already has an entity with MouseInputServiceComponent!",
                "You should check if the context already has a mouseInputServiceEntity before setting it or use context.ReplaceMouseInputService().");
        }
        var entity = CreateEntity();
        entity.AddMouseInputService(newInstance);
        return entity;
    }

    public void ReplaceMouseInputService(IMouseInputService newInstance) {
        var entity = mouseInputServiceEntity;
        if (entity == null) {
            entity = SetMouseInputService(newInstance);
        } else {
            entity.ReplaceMouseInputService(newInstance);
        }
    }

    public void RemoveMouseInputService() {
        mouseInputServiceEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public MouseInputServiceComponent mouseInputService { get { return (MouseInputServiceComponent)GetComponent(GameComponentsLookup.MouseInputService); } }
    public bool hasMouseInputService { get { return HasComponent(GameComponentsLookup.MouseInputService); } }

    public void AddMouseInputService(IMouseInputService newInstance) {
        var index = GameComponentsLookup.MouseInputService;
        var component = (MouseInputServiceComponent)CreateComponent(index, typeof(MouseInputServiceComponent));
        component.instance = newInstance;
        AddComponent(index, component);
    }

    public void ReplaceMouseInputService(IMouseInputService newInstance) {
        var index = GameComponentsLookup.MouseInputService;
        var component = (MouseInputServiceComponent)CreateComponent(index, typeof(MouseInputServiceComponent));
        component.instance = newInstance;
        ReplaceComponent(index, component);
    }

    public void RemoveMouseInputService() {
        RemoveComponent(GameComponentsLookup.MouseInputService);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMouseInputService;

    public static Entitas.IMatcher<GameEntity> MouseInputService {
        get {
            if (_matcherMouseInputService == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MouseInputService);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMouseInputService = matcher;
            }

            return _matcherMouseInputService;
        }
    }
}
