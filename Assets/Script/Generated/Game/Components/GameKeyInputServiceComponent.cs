//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity keyInputServiceEntity { get { return GetGroup(GameMatcher.KeyInputService).GetSingleEntity(); } }
    public KeyInputServiceComponent keyInputService { get { return keyInputServiceEntity.keyInputService; } }
    public bool hasKeyInputService { get { return keyInputServiceEntity != null; } }

    public GameEntity SetKeyInputService(IKeyInputService newInstance) {
        if (hasKeyInputService) {
            throw new Entitas.EntitasException("Could not set KeyInputService!\n" + this + " already has an entity with KeyInputServiceComponent!",
                "You should check if the context already has a keyInputServiceEntity before setting it or use context.ReplaceKeyInputService().");
        }
        var entity = CreateEntity();
        entity.AddKeyInputService(newInstance);
        return entity;
    }

    public void ReplaceKeyInputService(IKeyInputService newInstance) {
        var entity = keyInputServiceEntity;
        if (entity == null) {
            entity = SetKeyInputService(newInstance);
        } else {
            entity.ReplaceKeyInputService(newInstance);
        }
    }

    public void RemoveKeyInputService() {
        keyInputServiceEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public KeyInputServiceComponent keyInputService { get { return (KeyInputServiceComponent)GetComponent(GameComponentsLookup.KeyInputService); } }
    public bool hasKeyInputService { get { return HasComponent(GameComponentsLookup.KeyInputService); } }

    public void AddKeyInputService(IKeyInputService newInstance) {
        var index = GameComponentsLookup.KeyInputService;
        var component = (KeyInputServiceComponent)CreateComponent(index, typeof(KeyInputServiceComponent));
        component.instance = newInstance;
        AddComponent(index, component);
    }

    public void ReplaceKeyInputService(IKeyInputService newInstance) {
        var index = GameComponentsLookup.KeyInputService;
        var component = (KeyInputServiceComponent)CreateComponent(index, typeof(KeyInputServiceComponent));
        component.instance = newInstance;
        ReplaceComponent(index, component);
    }

    public void RemoveKeyInputService() {
        RemoveComponent(GameComponentsLookup.KeyInputService);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherKeyInputService;

    public static Entitas.IMatcher<GameEntity> KeyInputService {
        get {
            if (_matcherKeyInputService == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.KeyInputService);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherKeyInputService = matcher;
            }

            return _matcherKeyInputService;
        }
    }
}
