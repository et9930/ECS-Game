//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity currentCollisionEntityEntity { get { return GetGroup(GameMatcher.CurrentCollisionEntity).GetSingleEntity(); } }
    public CurrentCollisionEntityComponent currentCollisionEntity { get { return currentCollisionEntityEntity.currentCollisionEntity; } }
    public bool hasCurrentCollisionEntity { get { return currentCollisionEntityEntity != null; } }

    public GameEntity SetCurrentCollisionEntity(System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<int>> newDic) {
        if (hasCurrentCollisionEntity) {
            throw new Entitas.EntitasException("Could not set CurrentCollisionEntity!\n" + this + " already has an entity with CurrentCollisionEntityComponent!",
                "You should check if the context already has a currentCollisionEntityEntity before setting it or use context.ReplaceCurrentCollisionEntity().");
        }
        var entity = CreateEntity();
        entity.AddCurrentCollisionEntity(newDic);
        return entity;
    }

    public void ReplaceCurrentCollisionEntity(System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<int>> newDic) {
        var entity = currentCollisionEntityEntity;
        if (entity == null) {
            entity = SetCurrentCollisionEntity(newDic);
        } else {
            entity.ReplaceCurrentCollisionEntity(newDic);
        }
    }

    public void RemoveCurrentCollisionEntity() {
        currentCollisionEntityEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public CurrentCollisionEntityComponent currentCollisionEntity { get { return (CurrentCollisionEntityComponent)GetComponent(GameComponentsLookup.CurrentCollisionEntity); } }
    public bool hasCurrentCollisionEntity { get { return HasComponent(GameComponentsLookup.CurrentCollisionEntity); } }

    public void AddCurrentCollisionEntity(System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<int>> newDic) {
        var index = GameComponentsLookup.CurrentCollisionEntity;
        var component = (CurrentCollisionEntityComponent)CreateComponent(index, typeof(CurrentCollisionEntityComponent));
        component.dic = newDic;
        AddComponent(index, component);
    }

    public void ReplaceCurrentCollisionEntity(System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<int>> newDic) {
        var index = GameComponentsLookup.CurrentCollisionEntity;
        var component = (CurrentCollisionEntityComponent)CreateComponent(index, typeof(CurrentCollisionEntityComponent));
        component.dic = newDic;
        ReplaceComponent(index, component);
    }

    public void RemoveCurrentCollisionEntity() {
        RemoveComponent(GameComponentsLookup.CurrentCollisionEntity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCurrentCollisionEntity;

    public static Entitas.IMatcher<GameEntity> CurrentCollisionEntity {
        get {
            if (_matcherCurrentCollisionEntity == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CurrentCollisionEntity);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCurrentCollisionEntity = matcher;
            }

            return _matcherCurrentCollisionEntity;
        }
    }
}
