//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity jumpAngleEntity { get { return GetGroup(GameMatcher.JumpAngle).GetSingleEntity(); } }
    public JumpAngleComponent jumpAngle { get { return jumpAngleEntity.jumpAngle; } }
    public bool hasJumpAngle { get { return jumpAngleEntity != null; } }

    public GameEntity SetJumpAngle(float newValue) {
        if (hasJumpAngle) {
            throw new Entitas.EntitasException("Could not set JumpAngle!\n" + this + " already has an entity with JumpAngleComponent!",
                "You should check if the context already has a jumpAngleEntity before setting it or use context.ReplaceJumpAngle().");
        }
        var entity = CreateEntity();
        entity.AddJumpAngle(newValue);
        return entity;
    }

    public void ReplaceJumpAngle(float newValue) {
        var entity = jumpAngleEntity;
        if (entity == null) {
            entity = SetJumpAngle(newValue);
        } else {
            entity.ReplaceJumpAngle(newValue);
        }
    }

    public void RemoveJumpAngle() {
        jumpAngleEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public JumpAngleComponent jumpAngle { get { return (JumpAngleComponent)GetComponent(GameComponentsLookup.JumpAngle); } }
    public bool hasJumpAngle { get { return HasComponent(GameComponentsLookup.JumpAngle); } }

    public void AddJumpAngle(float newValue) {
        var index = GameComponentsLookup.JumpAngle;
        var component = (JumpAngleComponent)CreateComponent(index, typeof(JumpAngleComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceJumpAngle(float newValue) {
        var index = GameComponentsLookup.JumpAngle;
        var component = (JumpAngleComponent)CreateComponent(index, typeof(JumpAngleComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveJumpAngle() {
        RemoveComponent(GameComponentsLookup.JumpAngle);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherJumpAngle;

    public static Entitas.IMatcher<GameEntity> JumpAngle {
        get {
            if (_matcherJumpAngle == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.JumpAngle);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherJumpAngle = matcher;
            }

            return _matcherJumpAngle;
        }
    }
}
