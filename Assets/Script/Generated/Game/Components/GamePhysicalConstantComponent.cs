//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity physicalConstantEntity { get { return GetGroup(GameMatcher.PhysicalConstant).GetSingleEntity(); } }
    public PhysicalConstantComponent physicalConstant { get { return physicalConstantEntity.physicalConstant; } }
    public bool hasPhysicalConstant { get { return physicalConstantEntity != null; } }

    public GameEntity SetPhysicalConstant(float newGravity, float newFrictionCoefficient) {
        if (hasPhysicalConstant) {
            throw new Entitas.EntitasException("Could not set PhysicalConstant!\n" + this + " already has an entity with PhysicalConstantComponent!",
                "You should check if the context already has a physicalConstantEntity before setting it or use context.ReplacePhysicalConstant().");
        }
        var entity = CreateEntity();
        entity.AddPhysicalConstant(newGravity, newFrictionCoefficient);
        return entity;
    }

    public void ReplacePhysicalConstant(float newGravity, float newFrictionCoefficient) {
        var entity = physicalConstantEntity;
        if (entity == null) {
            entity = SetPhysicalConstant(newGravity, newFrictionCoefficient);
        } else {
            entity.ReplacePhysicalConstant(newGravity, newFrictionCoefficient);
        }
    }

    public void RemovePhysicalConstant() {
        physicalConstantEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PhysicalConstantComponent physicalConstant { get { return (PhysicalConstantComponent)GetComponent(GameComponentsLookup.PhysicalConstant); } }
    public bool hasPhysicalConstant { get { return HasComponent(GameComponentsLookup.PhysicalConstant); } }

    public void AddPhysicalConstant(float newGravity, float newFrictionCoefficient) {
        var index = GameComponentsLookup.PhysicalConstant;
        var component = (PhysicalConstantComponent)CreateComponent(index, typeof(PhysicalConstantComponent));
        component.gravity = newGravity;
        component.frictionCoefficient = newFrictionCoefficient;
        AddComponent(index, component);
    }

    public void ReplacePhysicalConstant(float newGravity, float newFrictionCoefficient) {
        var index = GameComponentsLookup.PhysicalConstant;
        var component = (PhysicalConstantComponent)CreateComponent(index, typeof(PhysicalConstantComponent));
        component.gravity = newGravity;
        component.frictionCoefficient = newFrictionCoefficient;
        ReplaceComponent(index, component);
    }

    public void RemovePhysicalConstant() {
        RemoveComponent(GameComponentsLookup.PhysicalConstant);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPhysicalConstant;

    public static Entitas.IMatcher<GameEntity> PhysicalConstant {
        get {
            if (_matcherPhysicalConstant == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PhysicalConstant);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPhysicalConstant = matcher;
            }

            return _matcherPhysicalConstant;
        }
    }
}
