//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity perceptionPositionAccurateEntity { get { return GetGroup(GameMatcher.PerceptionPositionAccurate).GetSingleEntity(); } }
    public PerceptionPositionAccurateComponent perceptionPositionAccurate { get { return perceptionPositionAccurateEntity.perceptionPositionAccurate; } }
    public bool hasPerceptionPositionAccurate { get { return perceptionPositionAccurateEntity != null; } }

    public GameEntity SetPerceptionPositionAccurate(System.Collections.Generic.Dictionary<string, GameEntity> newDic) {
        if (hasPerceptionPositionAccurate) {
            throw new Entitas.EntitasException("Could not set PerceptionPositionAccurate!\n" + this + " already has an entity with PerceptionPositionAccurateComponent!",
                "You should check if the context already has a perceptionPositionAccurateEntity before setting it or use context.ReplacePerceptionPositionAccurate().");
        }
        var entity = CreateEntity();
        entity.AddPerceptionPositionAccurate(newDic);
        return entity;
    }

    public void ReplacePerceptionPositionAccurate(System.Collections.Generic.Dictionary<string, GameEntity> newDic) {
        var entity = perceptionPositionAccurateEntity;
        if (entity == null) {
            entity = SetPerceptionPositionAccurate(newDic);
        } else {
            entity.ReplacePerceptionPositionAccurate(newDic);
        }
    }

    public void RemovePerceptionPositionAccurate() {
        perceptionPositionAccurateEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PerceptionPositionAccurateComponent perceptionPositionAccurate { get { return (PerceptionPositionAccurateComponent)GetComponent(GameComponentsLookup.PerceptionPositionAccurate); } }
    public bool hasPerceptionPositionAccurate { get { return HasComponent(GameComponentsLookup.PerceptionPositionAccurate); } }

    public void AddPerceptionPositionAccurate(System.Collections.Generic.Dictionary<string, GameEntity> newDic) {
        var index = GameComponentsLookup.PerceptionPositionAccurate;
        var component = (PerceptionPositionAccurateComponent)CreateComponent(index, typeof(PerceptionPositionAccurateComponent));
        component.dic = newDic;
        AddComponent(index, component);
    }

    public void ReplacePerceptionPositionAccurate(System.Collections.Generic.Dictionary<string, GameEntity> newDic) {
        var index = GameComponentsLookup.PerceptionPositionAccurate;
        var component = (PerceptionPositionAccurateComponent)CreateComponent(index, typeof(PerceptionPositionAccurateComponent));
        component.dic = newDic;
        ReplaceComponent(index, component);
    }

    public void RemovePerceptionPositionAccurate() {
        RemoveComponent(GameComponentsLookup.PerceptionPositionAccurate);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPerceptionPositionAccurate;

    public static Entitas.IMatcher<GameEntity> PerceptionPositionAccurate {
        get {
            if (_matcherPerceptionPositionAccurate == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PerceptionPositionAccurate);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPerceptionPositionAccurate = matcher;
            }

            return _matcherPerceptionPositionAccurate;
        }
    }
}
