//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity jumpForceEntity { get { return GetGroup(GameMatcher.JumpForce).GetSingleEntity(); } }
    public JumpForceComponent jumpForce { get { return jumpForceEntity.jumpForce; } }
    public bool hasJumpForce { get { return jumpForceEntity != null; } }

    public GameEntity SetJumpForce(float newValue) {
        if (hasJumpForce) {
            throw new Entitas.EntitasException("Could not set JumpForce!\n" + this + " already has an entity with JumpForceComponent!",
                "You should check if the context already has a jumpForceEntity before setting it or use context.ReplaceJumpForce().");
        }
        var entity = CreateEntity();
        entity.AddJumpForce(newValue);
        return entity;
    }

    public void ReplaceJumpForce(float newValue) {
        var entity = jumpForceEntity;
        if (entity == null) {
            entity = SetJumpForce(newValue);
        } else {
            entity.ReplaceJumpForce(newValue);
        }
    }

    public void RemoveJumpForce() {
        jumpForceEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public JumpForceComponent jumpForce { get { return (JumpForceComponent)GetComponent(GameComponentsLookup.JumpForce); } }
    public bool hasJumpForce { get { return HasComponent(GameComponentsLookup.JumpForce); } }

    public void AddJumpForce(float newValue) {
        var index = GameComponentsLookup.JumpForce;
        var component = (JumpForceComponent)CreateComponent(index, typeof(JumpForceComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceJumpForce(float newValue) {
        var index = GameComponentsLookup.JumpForce;
        var component = (JumpForceComponent)CreateComponent(index, typeof(JumpForceComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveJumpForce() {
        RemoveComponent(GameComponentsLookup.JumpForce);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherJumpForce;

    public static Entitas.IMatcher<GameEntity> JumpForce {
        get {
            if (_matcherJumpForce == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.JumpForce);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherJumpForce = matcher;
            }

            return _matcherJumpForce;
        }
    }
}
