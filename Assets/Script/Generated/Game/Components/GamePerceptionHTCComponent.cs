//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity perceptionHTCEntity { get { return GetGroup(GameMatcher.PerceptionHTC).GetSingleEntity(); } }
    public PerceptionHTCComponent perceptionHTC { get { return perceptionHTCEntity.perceptionHTC; } }
    public bool hasPerceptionHTC { get { return perceptionHTCEntity != null; } }

    public GameEntity SetPerceptionHTC(System.Collections.Generic.Dictionary<string, GameEntity> newDic) {
        if (hasPerceptionHTC) {
            throw new Entitas.EntitasException("Could not set PerceptionHTC!\n" + this + " already has an entity with PerceptionHTCComponent!",
                "You should check if the context already has a perceptionHTCEntity before setting it or use context.ReplacePerceptionHTC().");
        }
        var entity = CreateEntity();
        entity.AddPerceptionHTC(newDic);
        return entity;
    }

    public void ReplacePerceptionHTC(System.Collections.Generic.Dictionary<string, GameEntity> newDic) {
        var entity = perceptionHTCEntity;
        if (entity == null) {
            entity = SetPerceptionHTC(newDic);
        } else {
            entity.ReplacePerceptionHTC(newDic);
        }
    }

    public void RemovePerceptionHTC() {
        perceptionHTCEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PerceptionHTCComponent perceptionHTC { get { return (PerceptionHTCComponent)GetComponent(GameComponentsLookup.PerceptionHTC); } }
    public bool hasPerceptionHTC { get { return HasComponent(GameComponentsLookup.PerceptionHTC); } }

    public void AddPerceptionHTC(System.Collections.Generic.Dictionary<string, GameEntity> newDic) {
        var index = GameComponentsLookup.PerceptionHTC;
        var component = (PerceptionHTCComponent)CreateComponent(index, typeof(PerceptionHTCComponent));
        component.dic = newDic;
        AddComponent(index, component);
    }

    public void ReplacePerceptionHTC(System.Collections.Generic.Dictionary<string, GameEntity> newDic) {
        var index = GameComponentsLookup.PerceptionHTC;
        var component = (PerceptionHTCComponent)CreateComponent(index, typeof(PerceptionHTCComponent));
        component.dic = newDic;
        ReplaceComponent(index, component);
    }

    public void RemovePerceptionHTC() {
        RemoveComponent(GameComponentsLookup.PerceptionHTC);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPerceptionHTC;

    public static Entitas.IMatcher<GameEntity> PerceptionHTC {
        get {
            if (_matcherPerceptionHTC == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PerceptionHTC);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPerceptionHTC = matcher;
            }

            return _matcherPerceptionHTC;
        }
    }
}
